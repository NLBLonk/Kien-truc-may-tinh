EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
2312678_NLBLong_Lab5Bai3.exe_ -- emu8086 assembler version: 4.08  
 
[ 9/21/2024  --  5:54:35 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       .data
[   4]    0100: 0A 0D 4E 68 61 70 20 73 6F 20 74 68   Tbao db 10,13,'Nhap so thap luc phan (toi da 4 ky so): $'
                61 70 20 6C 75 63 20 70 68 61 6E 20 
                28 74 6F 69 20 64 61 20 34 20 6B 79 
                20 73 6F 29 3A 20 24                
[   5]    012B: 0A 0D 53 6F 20 74 68 61 70 20 6C 75   KQ db 10,13,'So thap luc phan da nhap: $'
                63 20 70 68 61 6E 20 64 61 20 6E 68 
                61 70 3A 20 24                      
[   6]        :                                       .code
[   7]    0150: B8 10 00                              mov ax, @data
[   8]    0153: 8E D8                                 mov ds, ax
[   9]        :                                       
[  10]    0155: B4 09                                 mov ah, 9
[  11]    0157: BA 00 00                              lea dx, TBao
[  12]    015A: CD 21                                 int 21h
[  13]    015C: 33 DB                                 xor bx,bx
[  14]    015E: B1 04                                 mov cl,4
[  15]    0160:                                       input:
[  16]    0160: B4 01                                 mov ah, 1
[  17]    0162: CD 21                                 int 21h
[  18]        :                                       
[  19]    0164: 3C 0D                                 cmp al, 13
[  20]    0166: 74 10                                 je end_input
[  21]    0168: 3C 39                                 cmp al, 39h
[  22]    016A: 7F 04                                 jg letter
[  23]    016C: 24 0F                                 and al,0Fh
[  24]    016E: EB 02                                 jmp shift
[  25]        :                                       
[  26]    0170:                                       letter:
[  27]    0170: 2C 37                                 sub al,37h
[  28]    0172:                                       shift:
[  29]    0172: D3 E3                                 shl bx,cl
[  30]    0174: 0A D8                                 or bl,al
[  31]    0176: EB E8                                 jmp input
[  32]        :                                       
[  33]    0178:                                       end_input:
[  34]    0178: B4 09                                 mov ah, 9
[  35]    017A: BA 2B 00                              lea dx, KQ
[  36]    017D: CD 21                                 int 21h
[  37]        :                                       
[  38]    017F: B9 04 00                              mov cx, 4
[  39]    0182:                                       outputHex:
[  40]    0182: 8A D7                                 mov dl,bh
[  41]    0184: D0 EA D0 EA D0 EA D0 EA               shr dl,4
[  42]    018C: 80 FA 09                              cmp dl,9
[  43]    018F: 7F 09                                 jg output_letter
[  44]    0191: 80 CA 30                              or dl,30h
[  45]    0194: B4 02                                 mov ah,2
[  46]    0196: CD 21                                 int 21h
[  47]    0198: EB 07                                 jmp exit
[  48]    019A:                                       output_letter:
[  49]    019A: B4 02                                 mov ah, 2
[  50]    019C: 80 C2 37                              add dl, 37h
[  51]    019F: CD 21                                 int 21h
[  52]    01A1:                                       exit:
[  53]    01A1: D1 E3 D1 E3 D1 E3 D1 E3               shl bx,4
[  54]    01A9: E2 D7                                 loop outputHex
[  55]        :                                       
[  56]    01AB: B4 4C                                 mov ah, 4ch
[  57]    01AD: CD 21                                 int 21h
[  58]        :                                       end
[  59]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: AF      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 39      -   check sum (l.byte)
0013: B5      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 15      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 15      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
